# Headless service running the Postgres Database
#
# Headless means each pod is accessed by a stable hostname, 
# instead of an IP indicated by clusterIP:None.
# This is prefered for stateful applications like databases. 
# Requests go to same instance, even though IP might change
apiVersion: v1
kind: Service
metadata:
  name: dbservice 
  labels:
    app: postgresdb-service
spec:
  selector:
    app: postgres
  ports:
    - port: 5432 
  clusterIP: None

---

# Statefulset managing the deployment and scaling of a set of Pods 
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-stateful
spec:
  serviceName: dbservice # Connects to the Headless service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          # Initialize the postgres database after the pod is ready to connect to
          lifecycle:
            postStart:
              exec:       
                command:  ["/bin/bash", "-c", "until pg_isready -h localhost -U $POSTGRES_USER; do sleep 2; done; 
                            PGPASSWORD=$POSTGRES_PASSWORD psql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" --dbname \"$POSTGRES_DB\" -c 'CREATE DATABASE Database;'"]
          
          # Sets the postgres parameters to the values defined in the secrets
          env:            
            - name: POSTGRES_USER 
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: password
            # identify filesystem where data is stored
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - name: postgres-pvc
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
              # memory: "100Mi"
              # cpu: "250m"
            limits:
              memory: "5Gi"
              cpu: "1"
          
          # Checks whether pod is still alive
          livenessProbe:
            exec:
              command:
              - /usr/bin/pg_isready
              - -h
              - localhost         # localhost used, because of running inside the cluster
              - -U
              - postgres
            initialDelaySeconds: 20
            periodSeconds: 10
          # Checks whether pod was initialized correctly
          readinessProbe:
            exec:
              command:
              - /usr/bin/pg_isready
              - -h
              - localhost
              - -U
              - postgres
            initialDelaySeconds: 20
            periodSeconds: 2
  # Indicates how the persistent value claim is mounted
  volumeClaimTemplates:
    - metadata:
        name: postgres-pvc
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: ssd
        resources:
          requests:
            storage: 5Gi

